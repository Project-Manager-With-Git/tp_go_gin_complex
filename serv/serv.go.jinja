package serv

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"{{ app_name }}/apis"
	"{{ app_name }}/auth"
	"{{ app_name }}/downloads"
	"{{ app_name }}/events"
	"{{ app_name }}/models"
	"time"

	_ "{{ app_name }}/docs"

	"github.com/Golang-Tools/optparams"

	log "github.com/Golang-Tools/loggerhelper/v2"
	"github.com/Golang-Tools/sqlhelper/v2/bunproxy"
	"github.com/gin-contrib/cors"
	"github.com/gin-contrib/static"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	ginlogrus "github.com/toorop/gin-logrus"
)

type Serv struct {
	App_Version        string `json:"app_version" jsonschema:"required,title=v,description=应用版本,default={{ version }}"`
	App_Name           string `json:"app_name" jsonschema:"required,title=n,description=应用名,default={{ app_name }}"`
	Log_Level          string `json:"log_level" jsonschema:"required,title=l,description=log等级,enum=TRACE,enum=DEBUG,enum=INFO,enum=WARN,enum=ERROR,default=DEBUG"`
	Address            string `json:"address" jsonschema:"required,title=a,description=启动地址,default=0.0.0.0:5000"`
	Published_Address  string `json:"published_address" jsonschema:"title=p,description=外部访问地址"`
	Published_Protocol string `json:"published_protocol" jsonschema:"required,description=外部访问地址的对应协议,enum=http,enum=https,default=http"`

	Cros_Allow_Origins     []string `json:"cros_allow_origins" jsonschema:"nullable,description=跨域允许的域名"`
	Cros_Allow_Credentials bool     `json:"cros_allow_credentials" jsonschema:"description=跨域是否需要证书"`
	Cros_Allow_Headers     []string `json:"cros_allow_headers" jsonschema:"nullable,description=跨域允许的头"`
	Cros_Expose_Headers    []string `json:"cros_expose_headers" jsonschema:"nullable,description=跨域暴露的头"`

	Static_Page_Dir   string `json:"static_page_dir" jsonschema:"description=静态页面存放的文件夹"`
	Static_Source_Dir string `json:"static_source_dir" jsonschema:"description=静态资源存放的文件夹"`

	Serv_Cert_Path  string `json:"serv_cert_path" jsonschema:"description=服务证书位置"`
	Serv_Key_Path   string `json:"serv_key_path" jsonschema:"description=服务证书的私钥位置"`
	Ca_Cert_Path    string `json:"ca_cert_path" jsonschema:"description=根证书位置"`
	Client_Crl_Path string `json:"client_crl_path" jsonschema:"description=客户端证书黑名单"`

	/**
	auth模块使用的配置,如果不用auth模块可以注释掉
	*/
	Use_Auth                     bool   `json:"use_auth" jsonschema:"required,description=激活使用auth模块"`
	Auth_Secret                  string `json:"auth_secret" jsonschema:"required,title=s,description=应用秘钥用于auth,default=a_secret"`
	Auth_DB_URL                  string `json:"auth_db_url" jsonschema:"required,description=数据库连接url,default=sqlite://auth.db"`
	Auth_DB_Query_Timeout_MS     int    `json:"auth_db_query_timeout_ms" jsonschema:"description=设置访问数据库时的请求超时单位ms"`
	Auth_DB_Max_Open_Conns       int    `json:"auth_db_max_open_conns" jsonschema:"description=设置访问数据库时的最大连接数"`
	Auth_DB_Conn_Max_Lifetime_MS int    `json:"auth_db_conn_max_lifttime_ms" jsonschema:"description=设置访问数据库时的最大连接超时时间"`
	Auth_DB_Max_Idle_Conns       int    `json:"auth_db_max_idle_conns" jsonschema:"description=设置访问数据库时的最大空闲连接"`
	Auth_DB_Conn_Max_IdleTime_MS int    `json:"auth_db_conn_max_idletime_ms" jsonschema:"description=设置访问数据库时的空闲连接最大过期连接"`

	//event设置
	Event_Channel_Redis_URL              string `json:"event_channel_redis_url" jsonschema:"required,description=event使用的redis连接url,default=redis://localhost:6379/2"`
	Event_Channel_Redis_Query_Timeout_MS int    `json:"event_channel_redis_query_timeout_ms" jsonschema:"required,description=event使用redis连接url,default=50"`

	/**
	业务配置
	*/
	// 数据库配置
	DB_URL                  string `json:"db_url" jsonschema:"required,description=数据库连接url,default=sqlite://test.db"`
	DB_Query_Timeout_MS     int    `json:"db_query_timeout_ms" jsonschema:"description=设置访问数据库时的请求超时单位ms,default=50"`
	DB_Max_Open_Conns       int    `json:"db_max_open_conns" jsonschema:"description=设置访问数据库时的最大连接数,default=5"`
	DB_Conn_Max_Lifetime_MS int    `json:"db_conn_max_lifttime_ms" jsonschema:"description=设置访问数据库时的最大连接超时时间"`
	DB_Max_Idle_Conns       int    `json:"db_max_idle_conns" jsonschema:"description=设置访问数据库时的最大空闲连接,default=3"`
	DB_Conn_Max_IdleTime_MS int    `json:"db_conn_max_idletime_ms" jsonschema:"description=设置访问数据库时的空闲连接最大过期连接"`

	//这里开始设置其他业务配置

	app *gin.Engine `json:"-"`
}

// Runserv 运行服务
func (s *Serv) Runserv() {
	srv := &http.Server{
		Addr:    s.Address,
		Handler: s.app,
	}
	usetls := false
	if s.Serv_Cert_Path != "" && s.Serv_Key_Path != "" {
		usetls = true
		//双向认证
		if s.Ca_Cert_Path != "" {
			capool := x509.NewCertPool()
			caCrt, err := ioutil.ReadFile(s.Ca_Cert_Path)
			if err != nil {
				log.Error("read pem file error:", log.Dict{"err": err.Error(), "path": s.Ca_Cert_Path})
				os.Exit(2)
			}
			capool.AppendCertsFromPEM(caCrt)
			tlsconf := &tls.Config{
				RootCAs:    capool,
				ClientAuth: tls.RequireAndVerifyClientCert, // 检验客户端证书
			}
			//指定client名单
			if s.Client_Crl_Path != "" {
				clipool := x509.NewCertPool()
				cliCrt, err := ioutil.ReadFile(s.Client_Crl_Path)
				if err != nil {
					log.Error("read pem file error:", log.Dict{"err": err.Error(), "path": s.Client_Crl_Path})
					os.Exit(2)
				}
				clipool.AppendCertsFromPEM(cliCrt)
				tlsconf.ClientCAs = clipool
			}
			srv.TLSConfig = tlsconf
		}
	}

	//启动服务器
	go func() {
		// 服务连接
		log.Info("servrt start", log.Dict{"config": s})
		var err error
		if usetls {
			err = srv.ListenAndServeTLS(s.Serv_Cert_Path, s.Serv_Key_Path)

		} else {
			err = srv.ListenAndServe()
		}
		if err != nil && err != http.ErrServerClosed {
			log.Error("listen error", log.Dict{"err": err.Error()})
			os.Exit(2)
		}
	}()
	// 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）
	quit := make(chan os.Signal, 5)
	signal.Notify(quit, os.Interrupt)
	<-quit
	log.Info("Shutdown Server ...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	err := srv.Shutdown(ctx)
	if err != nil {
		log.Error("server shutdown error", log.Dict{"err": err.Error()})
		os.Exit(2)
	}
	log.Info("Server exiting")
}

// InitCors 初始化跨域设置
func (s *Serv) InitCors() {
	corsconf := cors.DefaultConfig()
	corsconf.AllowOrigins = []string{fmt.Sprintf("%s://%s", s.Published_Protocol, s.Address)}
	if s.Published_Address != "" {
		corsconf.AllowOrigins = append(corsconf.AllowOrigins, fmt.Sprintf("%s://%s", s.Published_Protocol, s.Published_Address))
	}
	if s.Cros_Allow_Origins != nil {
		corsconf.AllowOrigins = append(corsconf.AllowOrigins, s.Cros_Allow_Origins...)
	}
	if s.Log_Level == "DEBUG" {
		hostinfo := strings.Split(s.Address, ":")
		if len(hostinfo) == 2 {
			corsconf.AllowOrigins = append(corsconf.AllowOrigins, fmt.Sprintf("%s://%s:%s", s.Published_Protocol, "localhost", hostinfo[1]))
		} else {
			corsconf.AllowOrigins = append(corsconf.AllowOrigins, fmt.Sprintf("%s://%s", s.Published_Protocol, "localhost"))
		}
	}
	corsconf.AllowCredentials = s.Cros_Allow_Credentials
	if s.Cros_Allow_Headers != nil {
		for _, header := range s.Cros_Allow_Headers {
			corsconf.AddAllowHeaders(header)
		}
	}
	if s.Cros_Expose_Headers != nil {
		for _, header := range s.Cros_Expose_Headers {
			corsconf.AddExposeHeaders(header)
		}
	}
	log.Info("cros config",
		log.Dict{
			"AllowOrigins":     corsconf.AllowOrigins,
			"AllowCredentials": corsconf.AllowCredentials,
			"AllowHeaders":     corsconf.AllowHeaders,
			"ExposeHeaders":    corsconf.ExposeHeaders,
		})
	s.app.Use(cors.New(corsconf))
}

//InitStaticBind 绑定url对应的静态页
func (s *Serv) InitStaticBind() {
	//注册静态路由
	if s.Static_Page_Dir != "" {
		s.app.Use(static.Serve("/", static.LocalFile(s.Static_Page_Dir, false)))
	}

	if s.Static_Source_Dir != "" {
		s.app.Use(static.Serve("/static", static.LocalFile(s.Static_Source_Dir, false)))
	}
	if s.Log_Level == "DEBUG" {
		if s.Published_Address != "" {
			url := ginSwagger.URL(fmt.Sprintf("%s://%s/swagger/doc.json", s.Published_Protocol, s.Published_Address)) // The url pointing to API definition
			s.app.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))
		} else {
			url := ginSwagger.URL(fmt.Sprintf("%s://%s/swagger/doc.json", s.Published_Protocol, s.Address)) // The url pointing to API definition
			s.app.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))
		}
	}
}

//InitModels 初始化业务用的数据模型组件,使用默认代理对象
//注意先初始化models,再初始化其中使用的proxy
func (s *Serv) InitModels() func() {
	//先初始化数据模型模块挂载代理的回调
	models.Init()
	// 配置用到的数据库
	dbinitopts := []optparams.Option[bunproxy.Options]{
		bunproxy.WithDiscardUnknownColumns(),
	}
	if s.DB_Query_Timeout_MS > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithQueryTimeoutMS(s.DB_Query_Timeout_MS))
	}
	if s.DB_Max_Open_Conns > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithMaxOpenConns(s.DB_Max_Open_Conns))
	}
	if s.DB_Conn_Max_Lifetime_MS > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithConnMaxLifetimeMS(s.DB_Conn_Max_Lifetime_MS))
	}
	if s.DB_Max_Idle_Conns > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithMaxIdleConns(s.DB_Max_Idle_Conns))
	}
	if s.DB_Conn_Max_IdleTime_MS > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithConnMaxIdleTimeMS(s.DB_Conn_Max_IdleTime_MS))
	}

	err := bunproxy.Default.Init(s.DB_URL, dbinitopts...)
	if err != nil {
		log.Error("config db init error", log.Dict{"error": err.Error()})
		os.Exit(1)
	}
	log.Debug("config db ok")
	//其他配置比如redis,etcd等可以从这里开始
	log.Debug("init models")
	return func() {
		bunproxy.Default.Close()
	}
}

//InitAuth 初始化auth模块
func (s *Serv) InitAuth() auth.Close {
	dbinitopts := []optparams.Option[bunproxy.Options]{
		bunproxy.WithDiscardUnknownColumns(),
	}
	if s.Auth_DB_Query_Timeout_MS > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithQueryTimeoutMS(s.Auth_DB_Query_Timeout_MS))
	}
	if s.Auth_DB_Max_Open_Conns > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithMaxOpenConns(s.Auth_DB_Max_Open_Conns))
	}
	if s.Auth_DB_Conn_Max_Lifetime_MS > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithConnMaxLifetimeMS(s.Auth_DB_Conn_Max_Lifetime_MS))
	}
	if s.Auth_DB_Max_Idle_Conns > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithMaxIdleConns(s.Auth_DB_Max_Idle_Conns))
	}
	if s.Auth_DB_Conn_Max_IdleTime_MS > 0 {
		dbinitopts = append(dbinitopts, bunproxy.WithConnMaxIdleTimeMS(s.Auth_DB_Conn_Max_IdleTime_MS))
	}

	// 如果有其他auth设置可以在这里添加
	closeauth, err := auth.Init(
		s.app,
		s.Auth_Secret,
		auth.WithDBURL(s.Auth_DB_URL),
		auth.WithDBProxyInitOpts(dbinitopts...),
		//初始化api,download,等绑定url
	)
	if err != nil {
		log.Error("auth init error", log.Dict{"error": err.Error()})
		os.Exit(1)
	}
	log.Debug("auth init ok")
	return closeauth
}

// Main 入口函数
func (s *Serv) Main() {
	s.app = gin.New()
	// 初始化log
	log.Set(log.WithLevel(s.Log_Level),
		log.AddExtField("app_name", s.App_Name),
		log.AddExtField("app_version", s.App_Version),
	)
	// log
	s.app.Use(ginlogrus.Logger(log.GetLogger()), gin.Recovery())
	log.Info("serv get config", log.Dict{"config": s})

	// 设置跨域
	s.InitCors()

	// 设置数据模型
	modelsclose := s.InitModels()
	defer modelsclose()
	// 路径匹配绑定静态页面
	s.InitStaticBind()

	// 如果访问权限做校验的话
	if s.Use_Auth {
		authclose := s.InitAuth()
		defer authclose()
		apis.Init(s.app, apis.WithAppName(s.App_Name), apis.WithAppVersion(s.App_Version), apis.WithAuthMiddlewareFactory())
		downloads.Init(s.app, downloads.WithAppName(s.App_Name), downloads.WithAppVersion(s.App_Version), downloads.WithAuthMiddlewareFactory())
		events.Init(
			s.app, events.WithAppName(s.App_Name),
			events.WithAppVersion(s.App_Version),
			events.WithURL(s.Event_Channel_Redis_URL),
			events.WithQueryTimeoutMS(s.Event_Channel_Redis_Query_Timeout_MS),
			events.WithAuthMiddlewareFactory())
	} else {
		//如果不需要验权
		apis.Init(s.app, apis.WithAppName(s.App_Name), apis.WithAppVersion(s.App_Version))
		downloads.Init(s.app, downloads.WithAppName(s.App_Name), downloads.WithAppVersion(s.App_Version), downloads.WithAuthMiddlewareFactory())
		events.Init(
			s.app, events.WithAppName(s.App_Name),
			events.WithAppVersion(s.App_Version),
			events.WithURL(s.Event_Channel_Redis_URL),
			events.WithQueryTimeoutMS(s.Event_Channel_Redis_Query_Timeout_MS))
	}

	// 如果访问权限不做校验
	//apis.Init(s.app)
	//downloads.Init(s.app)
	//events.Init(s.app)
	// 启动服务
	s.Runserv()
}
